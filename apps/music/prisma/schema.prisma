// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  accounts      Account[]

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  Playlist  Playlist[]

  @@map("t_user")
}

// 第三方账户信息
model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("t_account")
}

model Song {
  id        Int      @id @default(autoincrement())
  title     String
  duration  Int /// 持续时间，单位为秒
  lyrics    String? /// 歌词
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  artistId Int    @map("artist_id")
  artist   Artist @relation(fields: [artistId], references: [id])
  albumId  Int?   @map("album_id")
  album    Album? @relation(fields: [albumId], references: [id])

  playlists PlaylistSong[]

  @@map("t_song")
}

// 歌手信息
model Artist {
  id   Int     @id @default(autoincrement())
  name String
  bio  String? /// 歌手简介

  imageUrl  String?  @map("image_url") /// 歌手图片
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  albums Album[]
  songs  Song[]

  @@map("t_artist")
}

// 专辑信息
model Album {
  id          Int       @id @default(autoincrement())
  title       String
  releaseDate DateTime? @map("release_date")
  coverUrl    String?   @map("cover_url") /// 专辑封面图片
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  artistId Int    @map("artist_id")
  artist   Artist @relation(fields: [artistId], references: [id])
  songs    Song[]

  @@map("t_album")
}

model Playlist {
  id          Int      @id @default(autoincrement())
  name        String /// 播放列表名称
  description String? /// 描述，可选
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  authorId String @map("author_id") /// 外键字段，关联 User 的 id
  author   User   @relation(fields: [authorId], references: [id]) /// 单向关系定义

  songs PlaylistSong[] /// 多对多关系，关联 Song

  @@map("t_playlist")
}

model PlaylistSong {
  id         Int @id @default(autoincrement())
  playlistId Int @map("playlist_id")
  songId     Int @map("song_id")

  playlist Playlist @relation(fields: [playlistId], references: [id])
  song     Song     @relation(fields: [songId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([playlistId, songId]) /// 保证同一个播放列表内不会有重复的歌曲
  @@map("t_playlist_song")
}
