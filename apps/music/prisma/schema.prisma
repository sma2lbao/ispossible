// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  userId String @map("user_id")
  roleId String @map("role_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([userId, roleId])
  @@map("t_user_role")
}

enum RoleName {
  ADMIN
  USER
  GUEST
}

/// 角色表
model Role {
  id          String     @id @default(cuid())
  name        RoleName   @unique
  description String?
  users       UserRole[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("t_role")
}

// 用户表
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?  @map("email_verified")
  password      String?
  image         String?
  accounts      Account[]
  roles         UserRole[]

  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  playlists Playlist[] /// 我的歌单
  favorites FavoriteSong[] /// 我喜欢的歌曲

  @@map("t_user")
}

// 第三方账户信息
model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("t_account")
}

model FavoriteSong {
  id Int @id @default(autoincrement())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  songId String @map("song_id")
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") /// 用户标记喜欢的时间

  @@unique([userId, songId]) /// 保证同一用户不会重复喜欢同一首歌曲
  @@map("t_favorite_song")
}

model Song {
  id          String  @id @default(cuid())
  title       String /// 歌曲名
  description String? // 描述
  sourceUrl   String  @map("source_url") /// 源文件
  coverUrl    String? @map("cover_url") /// 封面图片
  lyricUrl    String? @map("lyric_url") /// 歌词地址
  duration    Int? /// 持续时间，单位为秒

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  artistId String? @map("artist_id")
  artist   Artist? @relation(fields: [artistId], references: [id])
  albumId  String? @map("album_id")
  album    Album?  @relation(fields: [albumId], references: [id])

  playlists   PlaylistSong[]
  favoritedBy FavoriteSong[]

  @@map("t_song")
}

// 歌手信息
model Artist {
  id   String  @id @default(cuid())
  name String
  bio  String? /// 歌手简介

  imageUrl  String?  @map("image_url") /// 歌手图片
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  albums Album[]
  songs  Song[]

  @@map("t_artist")
}

// 专辑信息
model Album {
  id          String    @id @default(cuid())
  title       String
  description String? /// 简介
  releaseDate DateTime? @map("release_date")
  coverUrl    String?   @map("cover_url") /// 专辑封面图片
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  artistId String @map("artist_id")
  artist   Artist @relation(fields: [artistId], references: [id])
  songs    Song[]

  @@map("t_album")
}

model Playlist {
  id          String   @id @default(cuid())
  name        String /// 播放列表名称
  description String? /// 描述，可选
  coverUrl    String? /// 封面
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  authorId String @map("author_id") /// 外键字段，关联 User 的 id
  author   User   @relation(fields: [authorId], references: [id]) /// 单向关系定义

  songs PlaylistSong[] /// 多对多关系，关联 Song
  tags  PlaylistTag[] /// 多对多关系，关联 Tag

  @@map("t_playlist")
}

model PlaylistSong {
  id         Int    @id @default(autoincrement())
  playlistId String @map("playlist_id")
  songId     String @map("song_id")

  playlist Playlist @relation(fields: [playlistId], references: [id])
  song     Song     @relation(fields: [songId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([playlistId, songId]) /// 保证同一个播放列表内不会有重复的歌曲
  @@map("t_playlist_song")
}

model Tag {
  id        String        @id @default(cuid())
  name      String /// 标签名称
  category  String /// 标签分类
  playlists PlaylistTag[] /// 多对多关系

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("t_tag")
}

model PlaylistTag {
  playlistId String @map("playlist_id")
  tagId      String @map("tag_id")

  playlist Playlist @relation(fields: [playlistId], references: [id])
  tag      Tag      @relation(fields: [tagId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([playlistId, tagId]) /// 复合主键
  @@map("t_playlist_tag")
}
